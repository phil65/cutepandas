{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"CutePandas: PandasModels and Widgets for Qt","text":""},{"location":"index.html#what-is-it","title":"What is it?","text":"<p>CutePandas is a Python package that provides Qt-based widgets related to pandas data structures.</p>"},{"location":"index.html#what-does-it-include","title":"What does it include?","text":"<p>The official documentation is hosted on Github Pages: https://phil65.github.io/CutePandas/</p>"},{"location":"index.html#where-to-get-it","title":"Where to get it?","text":"<p>The source code is currently hosted on GitHub at: https://github.com/phil65/CutePandas</p> <p>The latest released version are available at the Python package index.</p> <pre><code># or PyPI\npip install cutepandas\n</code></pre>"},{"location":"index.html#installation-from-sources","title":"Installation from sources","text":"<p>This project uses poetry for dependency management and packaging. Install this first. In the <code>cutepandas</code> directory (same one where you found this file after cloning the git repo), execute:</p> <pre><code>poetry install\n</code></pre>"},{"location":"index.html#license","title":"License","text":"<p>MIT</p>"},{"location":"SUMMARY.html","title":"SUMMARY","text":"<ul> <li>models</li> <li>widgets</li> </ul>"},{"location":"changelog.html","title":"Changelog","text":""},{"location":"changelog.html#v032-2023-07-25","title":"v0.3.2 (2023-07-25)","text":""},{"location":"changelog.html#fix","title":"Fix","text":"<ul> <li>fix build pipeline</li> </ul>"},{"location":"changelog.html#v031-2023-07-25","title":"v0.3.1 (2023-07-25)","text":""},{"location":"changelog.html#fix_1","title":"Fix","text":"<ul> <li>disable tests for now</li> </ul>"},{"location":"changelog.html#v030-2023-07-25","title":"v0.3.0 (2023-07-25)","text":""},{"location":"changelog.html#feat","title":"Feat","text":"<ul> <li>merge from prettyqt</li> </ul>"},{"location":"changelog.html#v022-2022-11-11","title":"v0.2.2 (2022-11-11)","text":""},{"location":"changelog.html#v021-2022-11-11","title":"v0.2.1 (2022-11-11)","text":""},{"location":"changelog.html#fix_2","title":"Fix","text":"<ul> <li>fix tests</li> </ul>"},{"location":"changelog.html#v020-2022-11-11","title":"v0.2.0 (2022-11-11)","text":""},{"location":"changelog.html#feat_1","title":"Feat","text":"<ul> <li>initial commit</li> </ul>"},{"location":"models/index.html","title":"pandasmodels","text":"<p>Pandas models.</p> <p>CutePandas contains a range of tools to work with pandas data structures.</p>"},{"location":"models/index.html#models","title":"Models","text":"<p>CutePandas includes multiple models to display Pandas dataframes. One of the key \"issues\" is that in contrast to QAbstractTableModels, a pandas DataFrame can have MultiIndexes. CutePandas offers several approaches to display these MultiIndexes.</p> <p>PandasDataFrameModel is a very simple model which is displaying MultiIndexes by joining the multiple index levels using a separator. (the separator value is exposed as a Qt Property)</p> <p>In addition, two composed widgets are included which consist of three different tables (one for data, one for the index, one for the headers) which are synced on scrolling / resizing.</p> <p>There is also a model to get a detailed view on an index and another one to display the categories of a pandas category column.</p>"},{"location":"models/index.html#proxies","title":"Proxies","text":"<p>Since working with pandas often means working with tables containing several hundred thousands of rows, the default QSortFilterProxyModel does not work that well.</p> <p>CutePandas includes several proxy models which try to improve this.</p> <p>PandasStringColumnFilterProxyModel can be used to filter a column based on a search string. Instead of looping over the cells, a filter index is built using NumPy operations. This makes filtering super fast, even with several thousands of rows. A quick benchmark showed an almost 100x (!!) performance increase compared to QSortFilterProxyModel.</p> <p>PandasEvalFilterProxyModel works in a similar way, but filtering is done by a Python statement. (example: '\"a\" &gt; 10' would show all rows where the value of column \"a\" is greater than 10.)</p> <p>To display heatmaps, CutePandas also includes a proxy model to color the cells according to their values. That proxy model includes several modes, also including modes which dont need to pre-compute min-max values,</p> Name Children Inherits PandasColumnListModelcutepandas.pandasmodels.pandascolumnlistmodel <ul><li><code>ModelMixin</code></li><li><code>AbstractTableModel</code></li></ul> PandasStringColumnFilterProxyModelcutepandas.pandasmodels.pandasindexfilterproxymodel <ul><li>BasePandasIndexFilterProxyModel</li></ul> HorizontalHeaderModelcutepandas.pandasmodels.pandasdataframemodel <ul><li><code>AbstractTableModel</code></li></ul> PandasMultiStringColumnFilterProxyModelcutepandas.pandasmodels.pandasindexfilterproxymodel <ul><li>BasePandasIndexFilterProxyModel</li></ul> PandasIndexListModelcutepandas.pandasmodels.pandascolumnlistmodel <ul><li><code>ModelMixin</code></li><li><code>AbstractTableModel</code></li></ul> PandasDataFrameModelcutepandas.pandasmodels.pandasdataframemodel <ul><li><code>AbstractTableModel</code></li></ul> VerticalHeaderModelcutepandas.pandasmodels.pandasdataframemodel <ul><li><code>AbstractTableModel</code></li></ul> PandasEvalFilterProxyModelcutepandas.pandasmodels.pandasindexfilterproxymodel <ul><li>BasePandasIndexFilterProxyModel</li></ul> PandasCategoryListModelcutepandas.pandasmodels.pandascategorylistmodel <ul><li><code>ModelMixin</code></li><li><code>AbstractTableModel</code></li></ul>"},{"location":"models/HorizontalHeaderModel.html","title":"HorizontalHeaderModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"models/HorizontalHeaderModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractTableModel</code></p> Source code in <code>cutepandas/pandasmodels/pandasdataframemodel.py</code> <pre><code>class HorizontalHeaderModel(core.AbstractTableModel):\ndef __init__(self, df: pd.DataFrame, **kwargs):\nsuper().__init__(**kwargs)\nself.df = df\ndef columnCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nreturn 0 if self.df is None else self.df.columns.shape[0]\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nreturn 0 if self.df is None else self.df.columns.nlevels\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nmatch role:\ncase constants.DISPLAY_ROLE | constants.TOOLTIP_ROLE:\nrow = index.row()\ncol = index.column()\nif isinstance(self.df.columns, pd.MultiIndex):\nreturn str(self.df.columns.values[col][row])\nelse:\nreturn str(self.df.columns.values[col])\ncase constants.ALIGNMENT_ROLE:\nreturn constants.ALIGN_CENTER\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nmatch role, orientation:\ncase constants.DISPLAY_ROLE | constants.TOOLTIP_ROLE, constants.VERTICAL:\nif isinstance(self.df.columns, pd.MultiIndex):\nreturn str(self.df.columns.names[section])\nelse:\nreturn str(self.df.columns.name)\n</code></pre>"},{"location":"models/HorizontalHeaderModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  94044530227872[\"pandasdataframemodel.HorizontalHeaderModel\"]\n  94044528075040[\"core.AbstractTableModel\"]\n  94044528069808[\"core.AbstractTableModelMixin\"]\n  94044527246592[\"core.AbstractItemModelMixin\"]\n  94044526882848[\"core.ObjectMixin\"]\n  139634173933184[\"builtins.object\"]\n  94044513338784[\"QtCore.QAbstractTableModel\"]\n  94044513323920[\"QtCore.QAbstractItemModel\"]\n  94044512745568[\"QtCore.QObject\"]\n  94044522409344[\"Shiboken.Object\"]\n  94044528075040 --&gt; 94044530227872\n  94044528069808 --&gt; 94044528075040\n  94044527246592 --&gt; 94044528069808\n  94044526882848 --&gt; 94044527246592\n  139634173933184 --&gt; 94044526882848\n  94044513338784 --&gt; 94044528075040\n  94044513323920 --&gt; 94044513338784\n  94044512745568 --&gt; 94044513323920\n  94044522409344 --&gt; 94044512745568\n  139634173933184 --&gt; 94044522409344</code></pre>"},{"location":"models/HorizontalHeaderModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"models/PandasCategoryListModel.html","title":"PandasCategoryListModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"models/PandasCategoryListModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.ModelMixin</code>, <code>core.AbstractTableModel</code></p> Source code in <code>cutepandas/pandasmodels/pandascategorylistmodel.py</code> <pre><code>class PandasCategoryListModel(itemmodels.ModelMixin, core.AbstractTableModel):\nMIME_TYPE = \"mime_categories\"\nHEADER = [\"Name\", \"Code\"]\ndef __init__(self, df: pd.DataFrame | None = None, col=None, parent=None):\nsuper().__init__(parent=parent)\nself.df = df\nself.col = col\n@property\ndef series(self):\nreturn self.df[self.col]\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue: Any,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n) -&gt; bool:\nif not index.isValid():\nreturn False\nif role == constants.EDIT_ROLE and index.column() == 0:\nif value in self.series.cat.categories:\nlogger.error(\"Error: Category names must be unique.\")\nreturn False\nrename_dct = {index.data(constants.NAME_ROLE): value}\nwith self.change_layout():\nself.series = self.series.rename_categories(new_categories=rename_dct)\nreturn True\nreturn False\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\nif not index.isValid():\nreturn constants.DROP_ENABLED\nreturn self.DEFAULT_FLAGS | constants.IS_EDITABLE\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not index.isValid():\nreturn None\n# if role == constants.DECORATION_ROLE:\n#     if index.column() == 0:\n#         return iconprovider.get_icon(iconnames.CATEGORY, as_qicon=True)\ncat_name = self.series.cat.categories[index.row()]\nmatch role, index.column():\ncase constants.DISPLAY_ROLE | constants.EDIT_ROLE, 0:\nreturn helpers.format_name(cat_name)\ncase constants.DISPLAY_ROLE | constants.EDIT_ROLE, 1:\nreturn str(self.series.cat.codes[index.row()])\ncase constants.NAME_ROLE, _:\nif isinstance(cat_name, np.number):\nreturn cat_name.item()\nreturn cat_name\ncase constants.TOOLTIP_ROLE, _:\nnum_items = len(self.df[self.series == cat_name])\nreturn f\"&lt;b&gt;{cat_name}&lt;/b&gt;&lt;br&gt;Items: {num_items}\"\ncase constants.USER_ROLE, _:\nself.df = self.df[self.series == cat_name]\nreturn self.df\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nif not self.col or not hasattr(self.series, \"cat\"):\nreturn 0\nreturn len(self.series.cat.categories)\ndef mimeData(self, indexes):\nmime_data = core.MimeData()\ndata = [i.row() for i in indexes if i.column() == 0]\nmime_data.set_json_data(self.MIME_TYPE, data)\nreturn mime_data\ndef mimeTypes(self):\nreturn [self.MIME_TYPE]\ndef dropMimeData(self, mime_data, action, row, column, parent_index):\nif parent_index.isValid():\nreturn False\nif mime_data.hasFormat(self.MIME_TYPE):\nindexes = mime_data.get_json_data(self.MIME_TYPE)\ncats = self.series.cat.categories.tolist()\ncats = helpers.move_in_list(cats, indexes, row)\nself.reorder_categories(cats)\nreturn False\ndef sort(self, ncol, order):\nif ncol != 0:\nreturn None\nis_ascending = order == constants.ASCENDING\norder = sorted(self.series.cat.categories, reverse=is_ascending)\nself.reorder_categories(order)\ndef reorder_categories(self, order):\nwith self.change_layout():\nself.series = self.series.cat.reorder_categories(new_categories=order)\ndef add_category(self, new_categories):\nwith self.append_rows(1):\nself.series = self.series.cat.add_categories(new_categories=new_categories)\ndef toggle_ordered(self):\nwith self.change_layout():\nif self.series.cat.ordered:\nself.series = self.series.cat.set_unordered()\nelse:\nself.series = self.series.cat.set_ordered()\ndef remove_unused(self):\nwith self.change_layout():\nself.series = self.series.cat.remove_unused()\n</code></pre>"},{"location":"models/PandasCategoryListModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  94044530198432[\"pandascategorylistmodel.PandasCategoryListModel\"]\n  94044529536512[\"itemmodels.ModelMixin\"]\n  139634173933184[\"builtins.object\"]\n  94044528075040[\"core.AbstractTableModel\"]\n  94044528069808[\"core.AbstractTableModelMixin\"]\n  94044527246592[\"core.AbstractItemModelMixin\"]\n  94044526882848[\"core.ObjectMixin\"]\n  94044513338784[\"QtCore.QAbstractTableModel\"]\n  94044513323920[\"QtCore.QAbstractItemModel\"]\n  94044512745568[\"QtCore.QObject\"]\n  94044522409344[\"Shiboken.Object\"]\n  94044529536512 --&gt; 94044530198432\n  139634173933184 --&gt; 94044529536512\n  94044528075040 --&gt; 94044530198432\n  94044528069808 --&gt; 94044528075040\n  94044527246592 --&gt; 94044528069808\n  94044526882848 --&gt; 94044527246592\n  139634173933184 --&gt; 94044526882848\n  94044513338784 --&gt; 94044528075040\n  94044513323920 --&gt; 94044513338784\n  94044512745568 --&gt; 94044513323920\n  94044522409344 --&gt; 94044512745568\n  139634173933184 --&gt; 94044522409344</code></pre>"},{"location":"models/PandasCategoryListModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"models/PandasColumnListModel.html","title":"PandasColumnListModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"models/PandasColumnListModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.ModelMixin</code>, <code>core.AbstractTableModel</code></p> Source code in <code>cutepandas/pandasmodels/pandascolumnlistmodel.py</code> <pre><code>class PandasColumnListModel(itemmodels.ModelMixin, core.AbstractTableModel):\nHEADER = [\"Name\", \"Type\", \"Size\"]\nMIME_TYPE = \"mime_columns\"\ncontent_type = \"features\"\nclass Roles(enum.IntEnum):\n\"\"\"Role names.\"\"\"\nDTypeRole = constants.USER_ROLE + 4555\nColumnNameRole = constants.USER_ROLE + 4556\ndef __init__(self, df: pd.DataFrame = None, **kwargs):\nsuper().__init__(**kwargs)\nself.df = df\ndef mimeData(self, indexes):\nmime_data = core.MimeData()\ndata = [i.row() for i in indexes if i.column() == 0]\nmime_data.set_json_data(self.MIME_TYPE, data)\nreturn mime_data\ndef dropMimeData(self, mime_data, action, row, column, parent_index):\nif parent_index.isValid():\n# Since we only drop in between items, parent_index must be invalid\nreturn False\nif mime_data.hasFormat(self.MIME_TYPE):\ndata = mime_data.get_json_data(self.MIME_TYPE)\ncols = self.df.columns.tolist()\ncols = helpers.move_in_list(cols, data, row)\nwith self.change_layout():\nself.df = self.df[cols]\nself.update_all()\nreturn False\nelif mime_data.hasFormat(\"mime_indexes\"):\ndata = mime_data.get_json_data(\"mime_indexes\")\nnames = list(self.df.index.names)\nwith self.reset_model():\nself.df = self.df.reset_index(level=[names[i] for i in data])\nself.update_all()\nreturn False\ndef mimeTypes(self):\nreturn [self.MIME_TYPE]\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue: Any,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n) -&gt; bool:\nif not index.isValid():\nreturn False\nmatch role:\ncase constants.EDIT_ROLE:\ncolname = index.data(constants.NAME_ROLE)\nif value not in self.df.columns:\nself.df = self.df.rename(mapper={colname: value}, axis=\"columns\")\nself.update_all()\nreturn True\ncase constants.USER_ROLE:\nname = self.data_by_index(index).name\nself.df = self.df.assign(**{name: value})\nself.update_all()\nreturn True\ncase self.Roles.DTypeRole:\nname = index.data(constants.NAME_ROLE)\ntry:\nself.df = self.df.as_type(dtype=value)\nexcept TypeError as e:\nlogger.exception(e)\nelse:\nself.update_all()\nreturn True\nreturn False\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\nif not index.isValid():\nreturn constants.DROP_ENABLED\nif index.column() in [0, 1]:\nreturn self.DEFAULT_FLAGS | constants.IS_EDITABLE\nreturn self.DEFAULT_FLAGS\ndef removeRows(self, row, count, parent):\ncolnames = self.df.columns[row : row + count].tolist()\nwith self.remove_rows(row, row + count, parent):\nself.df = self.df.drop(labels=colnames, axis=1, errors=\"ignore\")\nself.update_all()\nreturn True\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not index.isValid():\nreturn None\nmatch role:\n# case constants.DECORATION_ROLE:\n#     if index.column() == 0:\n#         dtype = self.data_by_index(index).dtype\n#         return icons.icon_for_dtype(dtype)\ncase constants.DISPLAY_ROLE | constants.EDIT_ROLE:\nmatch index.column():\ncase 0:\nreturn str(self.data_by_index(index).name)\ncase 1:\nreturn str(self.data_by_index(index).dtype)\ncase 2:\nnbytes = self.data_by_index(index).nbytes\nlocale = core.Locale()\nreturn locale.get_formatted_data_size(nbytes)\ncase self.Roles.DTypeRole:\nreturn self.data_by_index(index).dtype\ncase constants.USER_ROLE:\nreturn self.data_by_index(index)\ncase self.Roles.ColumnNameRole:\nreturn self.data_by_index(index).name\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nreturn len(self.df.columns) if self.df is not None else 0\ndef sort(self, ncol, order):\nis_ascending = order == constants.ASCENDING\nmatch ncol:\ncase 0:\norder = sorted(self.df.columns, reverse=is_ascending)\ncase 1:\nmaps = [(col, str(self.df[col].dtype)) for col in self.df.columns]\nmaps.sort(key=lambda x: x[1], reverse=is_ascending)\norder = [c[0] for c in maps]\ncase 2:\nmaps = [(col, str(self.df[col].nbytes)) for col in self.df.columns]\nmaps.sort(key=lambda x: x[1], reverse=is_ascending)\norder = [c[0] for c in maps]\ncase _:\nreturn\nwith self.change_layout():\nself.df = self.df.reindex(labels=order, axis=\"columns\")\ndef data_by_index(self, index: core.ModelIndex):\nreturn self.df.iloc[:, index.row()]\ndef add_feature(self, series):\nwith self.append_rows(1):\nself.df = self.df.assign(**{series.name: series})\n</code></pre>"},{"location":"models/PandasColumnListModel.html#cutepandas.pandasmodels.pandascolumnlistmodel.PandasColumnListModel.Roles","title":"<code>Roles</code>","text":"<p>             Bases: <code>enum.IntEnum</code></p> <p>Role names.</p> Source code in <code>cutepandas/pandasmodels/pandascolumnlistmodel.py</code> <pre><code>class Roles(enum.IntEnum):\n\"\"\"Role names.\"\"\"\nDTypeRole = constants.USER_ROLE + 4555\nColumnNameRole = constants.USER_ROLE + 4556\n</code></pre>"},{"location":"models/PandasColumnListModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  94044530204208[\"pandascolumnlistmodel.PandasColumnListModel\"]\n  94044529536512[\"itemmodels.ModelMixin\"]\n  139634173933184[\"builtins.object\"]\n  94044528075040[\"core.AbstractTableModel\"]\n  94044528069808[\"core.AbstractTableModelMixin\"]\n  94044527246592[\"core.AbstractItemModelMixin\"]\n  94044526882848[\"core.ObjectMixin\"]\n  94044513338784[\"QtCore.QAbstractTableModel\"]\n  94044513323920[\"QtCore.QAbstractItemModel\"]\n  94044512745568[\"QtCore.QObject\"]\n  94044522409344[\"Shiboken.Object\"]\n  94044529536512 --&gt; 94044530204208\n  139634173933184 --&gt; 94044529536512\n  94044528075040 --&gt; 94044530204208\n  94044528069808 --&gt; 94044528075040\n  94044527246592 --&gt; 94044528069808\n  94044526882848 --&gt; 94044527246592\n  139634173933184 --&gt; 94044526882848\n  94044513338784 --&gt; 94044528075040\n  94044513323920 --&gt; 94044513338784\n  94044512745568 --&gt; 94044513323920\n  94044522409344 --&gt; 94044512745568\n  139634173933184 --&gt; 94044522409344</code></pre>"},{"location":"models/PandasColumnListModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"models/PandasDataFrameModel.html","title":"PandasDataFrameModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"models/PandasDataFrameModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractTableModel</code></p> <p>Table model for pandas DataFrames.</p> Source code in <code>cutepandas/pandasmodels/pandasdataframemodel.py</code> <pre><code>class PandasDataFrameModel(core.AbstractTableModel):\n\"\"\"Table model for pandas DataFrames.\"\"\"\nSUPPORTS = pd.DataFrame\nclass Roles(enum.IntEnum):\n\"\"\"Role names.\"\"\"\nDTypeRole = constants.USER_ROLE + 4555\nColumnNameRole = constants.USER_ROLE + 4556\ndef __init__(self, df, *args, **kwargs):\nself._multiindex_separator = \" | \"\nself.df = df\nsuper().__init__(*args, **kwargs)\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nreturn isinstance(instance, pd.DataFrame)\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nmatch role, orientation:\ncase constants.ALIGNMENT_ROLE, constants.HORIZONTAL:\nreturn constants.ALIGN_CENTER | constants.ALIGN_BOTTOM\ncase constants.DISPLAY_ROLE, constants.HORIZONTAL:\nheader = self.df.columns[section]\nif isinstance(header, tuple | list):\nreturn self._multiindex_separator.join(str(i) for i in header)\nreturn str(header)\n# label = helpers.format_name(self.df.columns[section])\n# return f\"{label}\\n{self.df.iloc[:, section].dtype}\"\n# case constants.DECORATION_ROLE, constants.HORIZONTAL if self.show_icons:\n#     dtype = self.df.iloc[:, section].dtype\n#     return icons.icon_for_dtype(dtype)\ncase _, _:\nreturn None\ndef set_multiindex_separator(self, separator: str):\nself._multiindex_separator = separator\ndef get_multiindex_separator(self) -&gt; str:\nreturn self._multiindex_separator\ndef columnCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nif self.df is None:\nreturn 0\nreturn 1 if type(self.df) == pd.Series else len(self.df.columns)\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nreturn len(self.df.index) if self.df is not None else 0\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nmatch role:\ncase constants.DISPLAY_ROLE | constants.EDIT_ROLE:\ncell = self.df.iat[index.row(), index.column()]\nreturn \"\" if pd.isnull(cell) else cell\ncase constants.TOOLTIP_ROLE:\nrow = index.row()\ncol = index.column()\ncell = self.df.iat[row, col]\n# NaN case\nreturn \"NaN\" if pd.isnull(cell) else str(cell)\ncase self.Roles.DTypeRole:\nreturn self.df.iloc[:, index.column()].dtype\ncase constants.USER_ROLE:\nreturn self.df.iloc[index.row(), index.column()]\ncase self.Roles.ColumnNameRole:\nreturn self.df.iloc[:, index.column()].name\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\nreturn constants.IS_EDITABLE | constants.IS_ENABLED | constants.IS_SELECTABLE\n#     return cur_flags if self.is_read_only else cur_flags | constants.IS_EDITABLE\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue: Any,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n) -&gt; bool:\nmatch role:\ncase constants.USER_ROLE | constants.EDIT_ROLE:\nrow = index.row()\ncol = index.column()\ntry:\nself.df.iat[row, col] = value\nexcept Exception as e:\nlogger.exception(e)\nreturn False\nelse:\nself.dataChanged.emit(index, index)\nreturn True\nreturn False\ndef sort(self, ncol: int, order: constants.SortOrder):\nis_ascending = order == constants.ASCENDING\nwith self.change_layout():\nself.df = self.df.sort_values(\nby=self.df.columns[ncol], ascending=is_ascending\n)\nself.update_all()\nmultiindex_separator = core.Property(\nstr,\nget_multiindex_separator,\nset_multiindex_separator,\ndoc=\"Separator to use for MultiIndexes\",\n)\n</code></pre>"},{"location":"models/PandasDataFrameModel.html#cutepandas.pandasmodels.pandasdataframemodel.PandasDataFrameModel.Roles","title":"<code>Roles</code>","text":"<p>             Bases: <code>enum.IntEnum</code></p> <p>Role names.</p> Source code in <code>cutepandas/pandasmodels/pandasdataframemodel.py</code> <pre><code>class Roles(enum.IntEnum):\n\"\"\"Role names.\"\"\"\nDTypeRole = constants.USER_ROLE + 4555\nColumnNameRole = constants.USER_ROLE + 4556\n</code></pre>"},{"location":"models/PandasDataFrameModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  94044530218720[\"pandasdataframemodel.PandasDataFrameModel\"]\n  94044528075040[\"core.AbstractTableModel\"]\n  94044528069808[\"core.AbstractTableModelMixin\"]\n  94044527246592[\"core.AbstractItemModelMixin\"]\n  94044526882848[\"core.ObjectMixin\"]\n  139634173933184[\"builtins.object\"]\n  94044513338784[\"QtCore.QAbstractTableModel\"]\n  94044513323920[\"QtCore.QAbstractItemModel\"]\n  94044512745568[\"QtCore.QObject\"]\n  94044522409344[\"Shiboken.Object\"]\n  94044528075040 --&gt; 94044530218720\n  94044528069808 --&gt; 94044528075040\n  94044527246592 --&gt; 94044528069808\n  94044526882848 --&gt; 94044527246592\n  139634173933184 --&gt; 94044526882848\n  94044513338784 --&gt; 94044528075040\n  94044513323920 --&gt; 94044513338784\n  94044512745568 --&gt; 94044513323920\n  94044522409344 --&gt; 94044512745568\n  139634173933184 --&gt; 94044522409344</code></pre> <p>Info</p> <p>Supported data type: <code>&lt;class 'pandas.core.frame.DataFrame'&gt;</code></p>"},{"location":"models/PandasDataFrameModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>multiindex_separator</code> QString Separator to use for MultiIndexes"},{"location":"models/PandasEvalFilterProxyModel.html","title":"PandasEvalFilterProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"models/PandasEvalFilterProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BasePandasIndexFilterProxyModel</code></p> Source code in <code>cutepandas/pandasmodels/pandasindexfilterproxymodel.py</code> <pre><code>class PandasEvalFilterProxyModel(BasePandasIndexFilterProxyModel):\nID = \"pandas_eval_filter\"\ndef __init__(self, **kwargs):\nself._expression = \"\"\nsuper().__init__(**kwargs)\ndef set_expression(self, expression: str):\nself._expression = expression\nif not self._expression:\nself._reset_filter_index(True)\nself._update_mapping()\ntry:\nself._filter_index = df.eval(self._expression)\nself._filter_index = self._filter_index.to_numpy()\n# df.eval doesnt neccessarily return a bool index. If not, show nothing.\nif self._filter_index.dtype != bool:\nself._reset_filter_index(False)\nexcept Exception:\nself._reset_filter_index(False)\nself._update_mapping()\ndef get_expression(self) -&gt; str:\nreturn self._expression\nexpression = core.Property(\nstr,\nget_expression,\nset_expression,\ndoc=\"Expression to use for filtering\",\n)\n</code></pre>"},{"location":"models/PandasEvalFilterProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  94044530235280[\"pandasindexfilterproxymodel.PandasEvalFilterProxyModel\"]\n  94044530229600[\"pandasindexfilterproxymodel.BasePandasIndexFilterProxyModel\"]\n  94044528053696[\"core.IdentityProxyModel\"]\n  94044527247552[\"core.AbstractProxyModelMixin\"]\n  94044527246592[\"core.AbstractItemModelMixin\"]\n  94044526882848[\"core.ObjectMixin\"]\n  139634173933184[\"builtins.object\"]\n  94044513355008[\"QtCore.QIdentityProxyModel\"]\n  94044512670032[\"QtCore.QAbstractProxyModel\"]\n  94044513323920[\"QtCore.QAbstractItemModel\"]\n  94044512745568[\"QtCore.QObject\"]\n  94044522409344[\"Shiboken.Object\"]\n  94044530229600 --&gt; 94044530235280\n  94044528053696 --&gt; 94044530229600\n  94044527247552 --&gt; 94044528053696\n  94044527246592 --&gt; 94044527247552\n  94044526882848 --&gt; 94044527246592\n  139634173933184 --&gt; 94044526882848\n  94044513355008 --&gt; 94044528053696\n  94044512670032 --&gt; 94044513355008\n  94044513323920 --&gt; 94044512670032\n  94044512745568 --&gt; 94044513323920\n  94044522409344 --&gt; 94044512745568\n  139634173933184 --&gt; 94044522409344</code></pre>"},{"location":"models/PandasEvalFilterProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>expression</code> QString Expression to use for filtering"},{"location":"models/PandasIndexListModel.html","title":"PandasIndexListModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"models/PandasIndexListModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.ModelMixin</code>, <code>core.AbstractTableModel</code></p> Source code in <code>cutepandas/pandasmodels/pandascolumnlistmodel.py</code> <pre><code>class PandasIndexListModel(itemmodels.ModelMixin, core.AbstractTableModel):\nHEADER = [\"Name\", \"Index type\", \"Monotonic\"]\nMIME_TYPE = \"mime_indexes\"\ndef __init__(self, ds: pd.DataFrame | None = None, **kwargs):\nsuper().__init__(**kwargs)\nself.df = ds\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue: Any,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n) -&gt; bool:\nif not index.isValid():\nreturn False\nmatch role:\ncase constants.EDIT_ROLE if index.column() == 0:\nlevel = index.row() if isinstance(self.df.index, pd.MultiIndex) else None\nself.df.index = self.df.index.set_names(names=value, level=level)\nreturn True\ncase constants.USER_ROLE if not isinstance(self.df.index, pd.MultiIndex):\nwith self.change_layout():\nself.df.index = value\nreturn True\ncase self.DTYPE_ROLE:\ntry:\nwith self.change_layout():\nself.df.index = self.df.index.astype(value)\nreturn True\nexcept TypeError as e:\nlogger.exception(e)\nreturn False\nreturn False\ndef removeRows(self, row, count, parent):\nwith self.remove_rows(row, row + count, parent):\nself.df = self.df.drop(labels=self.df.columns[row : row + count], axis=1)\nreturn True\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\nif not index.isValid():\nreturn constants.DROP_ENABLED\nis_range = self.df.index.name is None and isinstance(self.df.index, pd.RangeIndex)\nmatch index.column(), is_range:\ncase 0, True:\n# do not allow moving the \"default\" RangeIndex.\nreturn (\nconstants.IS_ENABLED | constants.IS_SELECTABLE | constants.IS_EDITABLE\n)\ncase _, True:\nreturn constants.IS_ENABLED | constants.IS_SELECTABLE\ncase 0 | 1, False:\nreturn self.DEFAULT_FLAGS | constants.IS_EDITABLE\ncase _, False:\nreturn self.DEFAULT_FLAGS\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not index.isValid():\nreturn None\nmatch role, index.column():\n# case constants.DECORATION_ROLE, 0:\n#     index = self.get_index(index.row())\n#     return icons.icon_for_index(index)\ncase constants.TOOLTIP_ROLE, _:\nindex = self.get_index(index.row())\nreturn (\nf\"&lt;b&gt;{index.name}&lt;/b&gt;&lt;br&gt;{'Contains NaNs'}: {index.hasnans}&lt;br&gt;\"\n# f\"{_('Monotonic')}: {index.is_monotonic}\"\n)\ncase constants.DISPLAY_ROLE | constants.EDIT_ROLE, 0:\nindex_name = self.df.index.names[index.row()]\nreturn index_name or \"[Unnamed]\"\ncase constants.DISPLAY_ROLE | constants.EDIT_ROLE, 1:\nreturn label_for_index(self.get_index(index.row()))\ncase constants.DISPLAY_ROLE | constants.EDIT_ROLE, 2:\nindex = self.get_index(index.row())\nif index.is_monotonic_increasing:\nreturn \"Increasing\"\nelif index.is_monotonic_decreasing:\nreturn \"Decreasing\"\ncase constants.USER_ROLE, _:\nname = self.df.index.names[index.row()]\nreturn self.df.index.get_level_values(name)\ncase constants.NAME_ROLE, _:\nreturn self.df.index.names[index.row()]\ncase self.DTYPE_ROLE, _:\nreturn self.get_index(index.row()).dtype\ndef rowCount(self, parent=None):\nreturn self.df.index.nlevels if self.df is not None else 0\ndef mimeData(self, indexes):\nmime_data = core.MimeData()\ndata = [i.row() for i in indexes if i.column() == 0]\nmime_data.set_json_data(self.MIME_TYPE, data)\nreturn mime_data\ndef dropMimeData(self, mime_data, action, row, column, parent_index):\nif parent_index.isValid():\nreturn False\nif mime_data.hasFormat(self.MIME_TYPE):\ndata = mime_data.get_json_data(self.MIME_TYPE)\nnames = list(self.df.index.names)\nnames = helpers.move_in_list(names, data, row)\nwith self.change_layout():\nself.df = self.df.reorder_levels(order=names)\nelif mime_data.hasFormat(\"mime_columns\"):\ndata = mime_data.get_json_data(\"mime_columns\")\ncols = self.df.columns.tolist()\nto_append = [cols[i] for i in data]\n# TODO: make sure drop offset is taken into account\nwith self.reset_model():\nself.df = self.df.set_index(keys=to_append, append=True)\nreturn False\ndef mimeTypes(self):\nreturn [self.MIME_TYPE]\ndef get_index(self, row=None):\nidx = self.df.index\n# using get_level_values() is too slow for large datasets with multiindex\nreturn idx.levels[row] if isinstance(idx, pd.MultiIndex) else idx\ndef to_datetime(self, level=None, fmt: str | None = None):\nwith self.change_layout():\nself.df.index = self.df.index.pt.to_datetime(level=level, fmt=fmt)\ndef filter_range(self, start: int, end: int):\nwith self.change_layout():\nself.df = self.df.iloc[start:end]\nreturn True\n</code></pre>"},{"location":"models/PandasIndexListModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  94044530213584[\"pandascolumnlistmodel.PandasIndexListModel\"]\n  94044529536512[\"itemmodels.ModelMixin\"]\n  139634173933184[\"builtins.object\"]\n  94044528075040[\"core.AbstractTableModel\"]\n  94044528069808[\"core.AbstractTableModelMixin\"]\n  94044527246592[\"core.AbstractItemModelMixin\"]\n  94044526882848[\"core.ObjectMixin\"]\n  94044513338784[\"QtCore.QAbstractTableModel\"]\n  94044513323920[\"QtCore.QAbstractItemModel\"]\n  94044512745568[\"QtCore.QObject\"]\n  94044522409344[\"Shiboken.Object\"]\n  94044529536512 --&gt; 94044530213584\n  139634173933184 --&gt; 94044529536512\n  94044528075040 --&gt; 94044530213584\n  94044528069808 --&gt; 94044528075040\n  94044527246592 --&gt; 94044528069808\n  94044526882848 --&gt; 94044527246592\n  139634173933184 --&gt; 94044526882848\n  94044513338784 --&gt; 94044528075040\n  94044513323920 --&gt; 94044513338784\n  94044512745568 --&gt; 94044513323920\n  94044522409344 --&gt; 94044512745568\n  139634173933184 --&gt; 94044522409344</code></pre>"},{"location":"models/PandasIndexListModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"models/PandasMultiStringColumnFilterProxyModel.html","title":"PandasMultiStringColumnFilterProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"models/PandasMultiStringColumnFilterProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BasePandasIndexFilterProxyModel</code></p> Source code in <code>cutepandas/pandasmodels/pandasindexfilterproxymodel.py</code> <pre><code>class PandasMultiStringColumnFilterProxyModel(BasePandasIndexFilterProxyModel):\ndef __init__(self, **kwargs):\nself._filters: dict[str, str] = {}\nsuper().__init__(**kwargs)\ndef set_filters(self, filters: dict[str, str]):\nself._filters = filters\ndf = self.get_source_model(skip_proxies=True).df  # type: ignore\n# workaround-ish way to implement \"startswith\" as an expression\nfilter_list = [f\"('{v}' &lt;= `{k}` &lt;= '{v}~')\" for k, v in self._filters.items()]\nexpr = \" &amp; \".join(filter_list)\ntry:\nself._filter_index = df.eval(expr)\nself._filter_index = self._filter_index.to_numpy()\nif self._filter_index.dtype != bool:\nself._filter_index = self._filter_index.astype(bool)\nexcept Exception:\nself._reset_filter_index(False)\nself._update_mapping()\ndef get_filters(self) -&gt; dict[str, str]:\nreturn self._filters\nfilters = core.Property(\ndict,\nget_filters,\nset_filters,\ndoc=\"Dictionary containing a Column-&gt;EvalStr mapping\",\n)\n</code></pre>"},{"location":"models/PandasMultiStringColumnFilterProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  94044530241728[\"pandasindexfilterproxymodel.PandasMultiStringColumnFilterProxyModel\"]\n  94044530229600[\"pandasindexfilterproxymodel.BasePandasIndexFilterProxyModel\"]\n  94044528053696[\"core.IdentityProxyModel\"]\n  94044527247552[\"core.AbstractProxyModelMixin\"]\n  94044527246592[\"core.AbstractItemModelMixin\"]\n  94044526882848[\"core.ObjectMixin\"]\n  139634173933184[\"builtins.object\"]\n  94044513355008[\"QtCore.QIdentityProxyModel\"]\n  94044512670032[\"QtCore.QAbstractProxyModel\"]\n  94044513323920[\"QtCore.QAbstractItemModel\"]\n  94044512745568[\"QtCore.QObject\"]\n  94044522409344[\"Shiboken.Object\"]\n  94044530229600 --&gt; 94044530241728\n  94044528053696 --&gt; 94044530229600\n  94044527247552 --&gt; 94044528053696\n  94044527246592 --&gt; 94044527247552\n  94044526882848 --&gt; 94044527246592\n  139634173933184 --&gt; 94044526882848\n  94044513355008 --&gt; 94044528053696\n  94044512670032 --&gt; 94044513355008\n  94044513323920 --&gt; 94044512670032\n  94044512745568 --&gt; 94044513323920\n  94044522409344 --&gt; 94044512745568\n  139634173933184 --&gt; 94044522409344</code></pre>"},{"location":"models/PandasMultiStringColumnFilterProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>filters</code> QVariantMap Dictionary containing a Column-&gt;EvalStr mapping"},{"location":"models/PandasStringColumnFilterProxyModel.html","title":"PandasStringColumnFilterProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"models/PandasStringColumnFilterProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BasePandasIndexFilterProxyModel</code></p> <p>Basically filters a dataframe based on df.iloc[:, column].str.somemethod(term).</p> Source code in <code>cutepandas/pandasmodels/pandasindexfilterproxymodel.py</code> <pre><code>class PandasStringColumnFilterProxyModel(BasePandasIndexFilterProxyModel):\n\"\"\"Basically filters a dataframe based on df.iloc[:, column].str.somemethod(term).\"\"\"\nID = \"pandas_str_filter\"\ndef __init__(self, **kwargs):\nself._filter_column = 0\nself._filter_mode: FilterModeStr = \"startswith\"\nself._case_sensitive = True\nself._flags = 0\nself._search_term = \"\"\nself._na_value = False\nsuper().__init__(**kwargs)\ndef set_search_term(self, search_term: str):\nself._search_term = search_term\nif not self._search_term:\nself._reset_filter_index(init_value=True)\nself._update_mapping()\nreturn\ndf = self.get_source_model(skip_proxies=True).df  # type: ignore\nmatch self.filter_mode:\ncase \"startswith\":\nself._filter_index = df.iloc[:, self._filter_column].str.startswith(\nself._search_term, na=self._na_value\n)\ncase \"endswith\":\nself._filter_index = df.iloc[:, self._filter_column].str.endswith(\nself._search_term, na=self._na_value\n)\ncase \"contains\":\nself._filter_index = df.iloc[:, self._filter_column].str.contains(\nself._search_term,\ncase=self._case_sensitive,\nflags=self._flags,\nna=self._na_value,\n)\ncase \"match\":\nself._filter_index = df.iloc[:, self._filter_column].str.match(\nself._search_term,\ncase=self._case_sensitive,\nflags=self._flags,\nna=self._na_value,\n)\nself._filter_index = self._filter_index.to_numpy()\n# this is needed for new StringDtype, otherwise much slower.\nif self._filter_index.dtype == object:\nself._filter_index = self._filter_index.astype(bool)\nself._update_mapping()\ndef get_search_term(self) -&gt; str:\nreturn self._search_term\ndef set_filter_column(self, column: int):\nself._filter_column = column\ndef get_filter_column(self) -&gt; int:\nreturn self._filter_column\ndef set_filter_mode(self, mode: FilterModeStr):\nself._filter_mode = mode\ndef get_filter_mode(self) -&gt; FilterModeStr:\nreturn self._filter_mode\ndef set_case_sensitive(self, mode: bool):\nself._case_sensitive = mode\ndef is_case_sensitive(self) -&gt; bool:\nreturn self._case_sensitive\ndef set_flags(self, flags: int):\nself._flags = flags\ndef get_flags(self) -&gt; int:\nreturn self._flags\ndef set_na_value(self, value: bool):\nself._na_value = value\ndef get_na_value(self) -&gt; bool:\nreturn self._na_value\nsearch_term = core.Property(\nstr,\nget_search_term,\nset_search_term,\ndoc=\"Term to use for filtering\",\n)\nfilter_column = core.Property(\nint,\nget_filter_column,\nset_filter_column,\ndoc=\"Column to use for filtering\",\n)\nfilter_mode = core.Property(\nstr,\nget_filter_mode,\nset_filter_mode,\ndoc=\"Filter mode\",\n)\ncase_sensitive = core.Property(\nbool,\nis_case_sensitive,\nset_case_sensitive,\ndoc=\"Case sensitivity of the filter. Does not apply to start/endswith.\",\n)\nre_flags = core.Property(\nint,\nget_flags,\nset_flags,\ndoc=\"Regex Flags for match and contains mode\",\n)\nna_value = core.Property(\nbool,\nget_na_value,\nset_na_value,\ndoc=\"NA value\",\n)\n</code></pre>"},{"location":"models/PandasStringColumnFilterProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  94044530237520[\"pandasindexfilterproxymodel.PandasStringColumnFilterProxyModel\"]\n  94044530229600[\"pandasindexfilterproxymodel.BasePandasIndexFilterProxyModel\"]\n  94044528053696[\"core.IdentityProxyModel\"]\n  94044527247552[\"core.AbstractProxyModelMixin\"]\n  94044527246592[\"core.AbstractItemModelMixin\"]\n  94044526882848[\"core.ObjectMixin\"]\n  139634173933184[\"builtins.object\"]\n  94044513355008[\"QtCore.QIdentityProxyModel\"]\n  94044512670032[\"QtCore.QAbstractProxyModel\"]\n  94044513323920[\"QtCore.QAbstractItemModel\"]\n  94044512745568[\"QtCore.QObject\"]\n  94044522409344[\"Shiboken.Object\"]\n  94044530229600 --&gt; 94044530237520\n  94044528053696 --&gt; 94044530229600\n  94044527247552 --&gt; 94044528053696\n  94044527246592 --&gt; 94044527247552\n  94044526882848 --&gt; 94044527246592\n  139634173933184 --&gt; 94044526882848\n  94044513355008 --&gt; 94044528053696\n  94044512670032 --&gt; 94044513355008\n  94044513323920 --&gt; 94044512670032\n  94044512745568 --&gt; 94044513323920\n  94044522409344 --&gt; 94044512745568\n  139634173933184 --&gt; 94044522409344</code></pre>"},{"location":"models/PandasStringColumnFilterProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>search_term</code> QString Term to use for filtering <code>filter_column</code> int Column to use for filtering <code>filter_mode</code> QString Filter mode <code>case_sensitive</code> bool Case sensitivity of the filter. Does not apply to start/endswith. <code>re_flags</code> int Regex Flags for match and contains mode <code>na_value</code> bool NA value"},{"location":"models/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>pandasmodels<ul> <li>PandasColumnListModel</li> <li>PandasStringColumnFilterProxyModel</li> <li>HorizontalHeaderModel</li> <li>PandasMultiStringColumnFilterProxyModel</li> <li>PandasIndexListModel</li> <li>PandasDataFrameModel</li> <li>VerticalHeaderModel</li> <li>PandasEvalFilterProxyModel</li> <li>PandasCategoryListModel</li> </ul> </li> </ul>"},{"location":"models/VerticalHeaderModel.html","title":"VerticalHeaderModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"models/VerticalHeaderModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractTableModel</code></p> Source code in <code>cutepandas/pandasmodels/pandasdataframemodel.py</code> <pre><code>class VerticalHeaderModel(core.AbstractTableModel):\ndef __init__(self, df: pd.DataFrame, **kwargs):\nsuper().__init__(**kwargs)\nself.df = df\ndef columnCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nreturn 0 if self.df is None else self.df.index.nlevels\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nreturn 0 if self.df is None else self.df.index.shape[0]\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nmatch role:\ncase constants.DISPLAY_ROLE | constants.TOOLTIP_ROLE:\nrow = index.row()\ncol = index.column()\nif isinstance(self.df.index, pd.MultiIndex):\nreturn str(self.df.index.values[row][col])\nelse:\nreturn str(self.df.index.values[row])\nreturn None\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; str | None:\nmatch role, orientation:\ncase constants.DISPLAY_ROLE | constants.TOOLTIP_ROLE, constants.HORIZONTAL:\nif isinstance(self.df.index, pd.MultiIndex):\nreturn str(self.df.index.names[section])\nelse:\nreturn str(self.df.index.name)\nreturn None\n</code></pre>"},{"location":"models/VerticalHeaderModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  94044530221472[\"pandasdataframemodel.VerticalHeaderModel\"]\n  94044528075040[\"core.AbstractTableModel\"]\n  94044528069808[\"core.AbstractTableModelMixin\"]\n  94044527246592[\"core.AbstractItemModelMixin\"]\n  94044526882848[\"core.ObjectMixin\"]\n  139634173933184[\"builtins.object\"]\n  94044513338784[\"QtCore.QAbstractTableModel\"]\n  94044513323920[\"QtCore.QAbstractItemModel\"]\n  94044512745568[\"QtCore.QObject\"]\n  94044522409344[\"Shiboken.Object\"]\n  94044528075040 --&gt; 94044530221472\n  94044528069808 --&gt; 94044528075040\n  94044527246592 --&gt; 94044528069808\n  94044526882848 --&gt; 94044527246592\n  139634173933184 --&gt; 94044526882848\n  94044513338784 --&gt; 94044528075040\n  94044513323920 --&gt; 94044513338784\n  94044512745568 --&gt; 94044513323920\n  94044522409344 --&gt; 94044512745568\n  139634173933184 --&gt; 94044522409344</code></pre>"},{"location":"models/VerticalHeaderModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"widgets/index.html","title":"pandaswidgets","text":"<p>pandaswidgets module.</p> <p>contains Pandas-related widgets</p> Name Children Inherits DataFrameWidgetcutepandas.pandaswidgets.dataframewidget <ul><li><code>MainWindow</code></li></ul> DataFrameManagerWidgetcutepandas.pandaswidgets.dataframemanagerwidget <ul><li><code>Splitter</code></li></ul> DataFrameViewercutepandas.pandaswidgets.dataframeviewer <ul><li><code>Widget</code></li></ul> DataFrameListWidgetcutepandas.pandaswidgets.dataframelistwidget <ul><li><code>TableView</code></li></ul>"},{"location":"widgets/DataFrameListWidget.html","title":"DataFrameListWidget","text":"<p>Qt Base Class: QTableView</p> <p>Signature: <code>QTableView(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"widgets/DataFrameListWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.TableView</code></p> Source code in <code>cutepandas/pandaswidgets/dataframelistwidget.py</code> <pre><code>class DataFrameListWidget(widgets.TableView):\ndef __init__(\nself,\nobject_name: str = \"pandas_df_manager\",\n**kwargs,\n):\nsuper().__init__(object_name=object_name, **kwargs)\nmodel = DataFrameListModel([])\nself.set_model(model)\nself.set_selection_behavior(\"rows\")\ndef add_df(self, df: pd.DataFrame):\nself.model().add(df)\ndef _on_current_change(self, new, old):\nrole = new.model().Roles.ColumnNameRole\ncolumn_name = new.data(role)\ndf = new.data(constants.USER_ROLE)\nmodel = pandasmodels.PandasCategoryListModel(df, column_name)\nself.category_table.set_model(model)\n</code></pre>"},{"location":"widgets/DataFrameListWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  94044530250608[\"dataframelistwidget.DataFrameListWidget\"]\n  94044533011696[\"widgets.TableView\"]\n  94044533010144[\"widgets.TableViewMixin\"]\n  94044532349376[\"widgets.AbstractItemViewMixin\"]\n  94044532320752[\"widgets.AbstractScrollAreaMixin\"]\n  94044532292064[\"widgets.FrameMixin\"]\n  94044532282928[\"widgets.WidgetMixin\"]\n  94044526882848[\"core.ObjectMixin\"]\n  139634173933184[\"builtins.object\"]\n  94044527894288[\"gui.PaintDeviceMixin\"]\n  94044530861984[\"QtWidgets.QTableView\"]\n  94044530799984[\"QtWidgets.QAbstractItemView\"]\n  94044513219088[\"QtWidgets.QAbstractScrollArea\"]\n  94044530652560[\"QtWidgets.QFrame\"]\n  94044530501936[\"QtWidgets.QWidget\"]\n  94044512745568[\"QtCore.QObject\"]\n  94044522409344[\"Shiboken.Object\"]\n  94044513228592[\"QtGui.QPaintDevice\"]\n  94044533011696 --&gt; 94044530250608\n  94044533010144 --&gt; 94044533011696\n  94044532349376 --&gt; 94044533010144\n  94044532320752 --&gt; 94044532349376\n  94044532292064 --&gt; 94044532320752\n  94044532282928 --&gt; 94044532292064\n  94044526882848 --&gt; 94044532282928\n  139634173933184 --&gt; 94044526882848\n  94044527894288 --&gt; 94044532282928\n  139634173933184 --&gt; 94044527894288\n  94044530861984 --&gt; 94044533011696\n  94044530799984 --&gt; 94044530861984\n  94044513219088 --&gt; 94044530799984\n  94044530652560 --&gt; 94044513219088\n  94044530501936 --&gt; 94044530652560\n  94044512745568 --&gt; 94044530501936\n  94044522409344 --&gt; 94044512745568\n  139634173933184 --&gt; 94044522409344\n  94044513228592 --&gt; 94044530501936\n  94044522409344 --&gt; 94044513228592</code></pre>"},{"location":"widgets/DataFrameListWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>showGrid</code> bool <code>gridStyle</code> Qt::PenStyle <code>sortingEnabled</code> bool <code>wordWrap</code> bool <code>cornerButtonEnabled</code> bool"},{"location":"widgets/DataFrameManagerWidget.html","title":"DataFrameManagerWidget","text":"<p>Qt Base Class: QSplitter</p> <p>Signature: <code>QSplitter(self, arg__1: PySide6.QtCore.Qt.Orientation, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QSplitter(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"widgets/DataFrameManagerWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Splitter</code></p> Source code in <code>cutepandas/pandaswidgets/dataframemanagerwidget.py</code> <pre><code>class DataFrameManagerWidget(widgets.Splitter):\ndef __init__(self, object_name: str = \"pandas_df_manager\", **kwargs):\nsuper().__init__(object_name=object_name, **kwargs)\nself.dataframe_list = pandaswidgets.DataFrameListWidget()\nself.dataframe_editor = pandaswidgets.DataFrameWidget()\nself.dataframe_list.selectionModel().currentRowChanged.connect(\nself._on_current_change\n)\nself.add(self.dataframe_list)\nwidget = widgets.Widget()\nwidget.set_layout(\"horizontal\")\nwidget.box.add(self.dataframe_editor)\nself.add(widget)\ndef add_df(self, df: pd.DataFrame):\nself.dataframe_list.add_df(df)\ndef _on_current_change(self, new, old):\ndf = new.data(constants.USER_ROLE)\nself.dataframe_editor.set_df(df)\n</code></pre>"},{"location":"widgets/DataFrameManagerWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  94044530252096[\"dataframemanagerwidget.DataFrameManagerWidget\"]\n  94044533122800[\"widgets.Splitter\"]\n  94044533121248[\"widgets.SplitterMixin\"]\n  94044532292064[\"widgets.FrameMixin\"]\n  94044532282928[\"widgets.WidgetMixin\"]\n  94044526882848[\"core.ObjectMixin\"]\n  139634173933184[\"builtins.object\"]\n  94044527894288[\"gui.PaintDeviceMixin\"]\n  94044530674880[\"QtWidgets.QSplitter\"]\n  94044530652560[\"QtWidgets.QFrame\"]\n  94044530501936[\"QtWidgets.QWidget\"]\n  94044512745568[\"QtCore.QObject\"]\n  94044522409344[\"Shiboken.Object\"]\n  94044513228592[\"QtGui.QPaintDevice\"]\n  94044533122800 --&gt; 94044530252096\n  94044533121248 --&gt; 94044533122800\n  94044532292064 --&gt; 94044533121248\n  94044532282928 --&gt; 94044532292064\n  94044526882848 --&gt; 94044532282928\n  139634173933184 --&gt; 94044526882848\n  94044527894288 --&gt; 94044532282928\n  139634173933184 --&gt; 94044527894288\n  94044530674880 --&gt; 94044533122800\n  94044530652560 --&gt; 94044530674880\n  94044530501936 --&gt; 94044530652560\n  94044512745568 --&gt; 94044530501936\n  94044522409344 --&gt; 94044512745568\n  139634173933184 --&gt; 94044522409344\n  94044513228592 --&gt; 94044530501936\n  94044522409344 --&gt; 94044513228592</code></pre>"},{"location":"widgets/DataFrameManagerWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>orientation</code> Qt::Orientation <code>opaqueResize</code> bool <code>handleWidth</code> int <code>childrenCollapsible</code> bool"},{"location":"widgets/DataFrameViewer.html","title":"DataFrameViewer","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"widgets/DataFrameViewer.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>cutepandas/pandaswidgets/dataframeviewer.py</code> <pre><code>class DataFrameViewer(widgets.Widget):\ndef __init__(self, df: pd.DataFrame | None = None, **kwargs):\nsuper().__init__(**kwargs)\n# Indicates whether the widget has been shown yet. Set to True in\nself._loaded = False\nself.df = df\n# Set up DataFrame TableView and Model\nself.table_data = DataTableView(df, parent=self)\nself.set_size_policy(\"expanding\", \"expanding\")\nself.table_data.selectionModel().selectionChanged.connect(\nself._on_selection_changed\n)\n# Create headers\nself.table_columns = HeaderView(orientation=constants.HORIZONTAL, parent=self)\nself.table_columns.clicked.connect(self.on_clicked)\nself.table_index = HeaderView(orientation=constants.VERTICAL, parent=self)\n# Set up layout\nself.layout_grid = self.set_layout(\"grid\", margin=0, spacing=0)\n# Link scrollbars\nself.table_data.h_scrollbar.valueChanged.connect(\nself.table_columns.h_scrollbar.setValue\n)\nself.table_data.v_scrollbar.valueChanged.connect(\nself.table_index.v_scrollbar.setValue\n)\nself.table_columns.h_scrollbar.valueChanged.connect(\nself.table_data.h_scrollbar.setValue\n)\nself.table_index.v_scrollbar.valueChanged.connect(\nself.table_data.v_scrollbar.setValue\n)\n# Disable scrolling on the headers. Even when hidden, dragging desyncs them\nself.table_index.h_scrollbar.valueChanged.connect(lambda: None)\n# Add items to layout\n# SpacerItem |            Table_columns\n#       table index             | TrackingSpacer\n#       Table Index             | Table Data      | V Scrollbar\n#            |  Tracking Spacer  |H Scrollbar\nself.layout_grid[0, 0] = widgets.SpacerItem(0, 0, \"expanding\", \"expanding\")\nself.layout_grid[0, 1:2] = self.table_columns\nself.layout_grid[1:2, 0:1] = self.table_index\nself.layout_grid[1, 2] = TrackingSpacer(ref_y=self.table_index.h_header)\nself.layout_grid[2, 2] = self.table_data\nself.layout_grid[2, 3] = self.table_data.v_scrollbar\nself.layout_grid[3, 1] = TrackingSpacer(ref_x=self.table_columns.v_header)\nself.layout_grid[3, 2] = self.table_data.h_scrollbar\n# These expand when the window is enlarged instead of having\n# the grid squares spread out\nself.layout_grid.setColumnStretch(4, 1)\nself.layout_grid.setRowStretch(4, 1)\n# These placeholders will ensure the size of the blank spaces beside our headers\nif df is not None:\nself.set_df(df)\ndef set_df(self, df: pd.DataFrame):\nself.df = df\nmodel = pandasmodels.PandasDataFrameModel(df, parent=self.table_data)\nself.table_data.set_model(model)\nself.table_data.selectionModel().selectionChanged.connect(\nself._on_selection_changed\n)\n# TODO: this gets called twice.\nself.table_columns.set_df(df)\nself.table_index.set_df(df)\n# Toggle level names\nif not (any(df.columns.names) or df.columns.name):\nself.table_columns.v_header.setFixedWidth(0)\nif not (any(df.index.names) or df.index.name):\nself.table_index.h_header.setFixedHeight(0)\nself.table_columns.selectionModel().selectionChanged.connect(\nself.on_column_selection_changed\n)\nself.table_index.selectionModel().selectionChanged.connect(\nself.on_index_selection_changed\n)\nself._resize_columns()\nself.table_data.updateGeometry()\nself.table_columns.updateGeometry()\ndef jump_to_column(self, col_num: int):\n\"\"\"Make sure column at given index is visible.\n        Scrolls to column at given index.\n        Arguments:\n            col_num: column to scroll to\n        \"\"\"\nif (model := self.table_data.model()) is not None:\nidx = model.index(0, col_num)\nself.table_data.scrollTo(idx)\nif (model := self.table_index.model()) is not None:\nidx = model.index(0, col_num)\nself.table_index.scrollTo(idx)\nif (model := self.table_columns.model()) is not None:\nidx = model.index(0, col_num)\nself.table_columns.scrollTo(idx)\n# def on_column_selection_changed(self, selected, deselected):\n#     if self.table_columns.hasFocus():\n#         selected = self.table_columns.get_higher_levels()\n#         self.table_data.selectionModel().select(\n#             selected,\n#             SelectionFlag.Columns\n#             | SelectionFlag.ClearAndSelect,\n#         )\n#     self.table_columns._on_selection_changed(selected, deselected)\n# def on_index_selection_changed(self, selected, deselected):\n#     if not self.table_index.hasFocus():\n#         return\n#     selected = self.table_index.get_higher_levels()\n#     self.table_data.selectionModel().select(\n#         selected,\n#         SelectionFlag.Rows\n#         | SelectionFlag.ClearAndSelect,\n#     )\n#     self.table_index._on_selection_changed(selected, deselected)\ndef on_clicked(self, ix: core.QModelIndex):\nself.df = self.df.sort_values(self.df.columns[ix.column()])\nself.data_changed()\ndef showEvent(self, event: gui.QShowEvent):\n\"\"\"Initialize column and row sizes on the first time the widget is shown.\"\"\"\nif not self._loaded and self.df is not None:\n# Set column widths\nself._resize_columns()\nself._loaded = True\nevent.accept()\ndef _resize_columns(self):\nN = 50\ncolumns = min(self.table_index.model().columnCount(), N)\nfor column_index in range(columns):\nself.auto_size_column(column_index)\n# Set row heights\n# Just sets a single uniform row height based on the first\n# N rows for performance.\ndefault_row_height = 30\nrows = min(self.table_index.model().rowCount(), N)\nfor row_index in range(rows):\nself.auto_size_row(row_index)\nheight = self.table_index.rowHeight(row_index)\ndefault_row_height = max(default_row_height, height)\n# Set limit for default row height\ndefault_row_height = min(default_row_height, 100)\nself.table_index.v_header.setDefaultSectionSize(default_row_height)\nself.table_data.v_header.setDefaultSectionSize(default_row_height)\ndef on_column_selection_changed(self, selected, deselected):\nif not self.table_columns.hasFocus():\nreturn\nhigher_levels = self.table_columns.get_higher_levels()\n# Set selection mode so selecting one row or column at a time\n# adds to selection each time\nselected.merge(higher_levels, SelectionFlag.Deselect)\n# Select the cells in the data view\nself.table_data.selectionModel().select(\nselected, SelectionFlag.Columns | SelectionFlag.ClearAndSelect\n)\ndef on_index_selection_changed(self, selected, deselected):\nif not self.table_index.hasFocus():\nreturn\nhigher_levels = self.table_index.get_higher_levels()\nselected.merge(higher_levels, SelectionFlag.Deselect)\nself.table_data.selectionModel().select(\nselected, SelectionFlag.Rows | SelectionFlag.ClearAndSelect\n)\ndef _on_selection_changed(self, selected, deselected):\n\"\"\"Runs when cells are selected in the main table.\n        This logic highlights the correct\n        cells in the vertical and horizontal headers when a data cell is selected\n        \"\"\"\n# The two blocks below check what columns or rows are selected in the data table\n# and highlights thecorresponding ones in the two headers. The if statements\n# check for focus on headers, because if the user clicks a header that will\n# auto-select all cells in that row or column which will trigger this function\n# and cause and infinite loop\nif not self.table_columns.hasFocus():\nself.table_columns.selectionModel().select(\nselected, SelectionFlag.Columns | SelectionFlag.ClearAndSelect\n)\nif not self.table_index.hasFocus():\nself.table_index.selectionModel().select(\nselected, SelectionFlag.Rows | SelectionFlag.ClearAndSelect\n)\ndef auto_size_column(self, column_index: int):\n\"\"\"Set the size of column at column_index to fit its contents.\"\"\"\npadding = 20\nself.table_columns.resizeColumnToContents(column_index)\nwidth = self.table_columns.columnWidth(column_index)\n# Iterate over the column's rows and check the width of each\n# to determine the max width for the column\n# Only check the first N rows for performance. If there is larger\n# content in cells below it will be cut off\nN = 75\nrows = min(self.table_data.model().rowCount(), N)\nfor i in range(rows):\nmi = self.table_data.model().index(i, column_index)\ntext = self.table_data.model().data(mi)\ntext = str(text)  # TODO: get rid of casting?\nw = self.table_data.fontMetrics().boundingRect(text).width()\nwidth = max(width, w)\nwidth += padding\n# add maximum allowable column width so column is never too big.\nmax_allowable_width = 400\nwidth = min(width, max_allowable_width)\nself.table_columns.setColumnWidth(column_index, width)\nself.table_data.setColumnWidth(column_index, width)\nself.table_data.updateGeometry()\nself.table_columns.updateGeometry()\ndef auto_size_row(self, row_index: int):\n\"\"\"Set the size of row at row_index to fix its contents.\"\"\"\npadding = 20\nself.table_index.resizeRowToContents(row_index)\nheight = self.table_index.rowHeight(row_index)\n# Iterate over the row's columns and check the width of each to\n# determine the max height for the row\n# Only check the first N columns for performance.\nN = 100\nmodel = self.table_data.model()\nfor i in range(min(N, model.columnCount())):\nmi = model.index(row_index, i)\ncell_width = self.table_columns.columnWidth(i)\ntext = model.data(mi)\n# Gets row height at a constrained width (the column width).\n# This constrained width, with the flag of Qt.TextWordWrap\n# gets the height the cell would have to be to fit the text.\nconstrained_rect = core.Rect(0, 0, cell_width, 0)\ntext = str(text)  # TODO: remove this?\nh = (\nself.table_data.fontMetrics()\n.boundingRect(constrained_rect, constants.TextFlag.TextWordWrap, text)\n.height()\n)\nheight = max(height, h)\nheight += padding\nself.table_index.setRowHeight(row_index, height)\nself.table_data.setRowHeight(row_index, height)\nself.table_data.updateGeometry()\nself.table_index.updateGeometry()\ndef keyPressEvent(self, event: core.QEvent):\nsuper().keyPressEvent(event)\nif event.matches(gui.KeySequence.StandardKey.Copy):\nself.table_data.copy()\nelif event.matches(gui.KeySequence.StandardKey.Paste):\nself.table_data.paste()\ndef data_changed(self):\n# Call dataChanged on all models for all data\nfor model in [\nself.table_data.model(),\nself.table_columns.model(),\nself.table_index.model(),\n]:\nmodel.update_all()\n</code></pre>"},{"location":"widgets/DataFrameViewer.html#cutepandas.pandaswidgets.dataframeviewer.DataFrameViewer.auto_size_column","title":"<code>auto_size_column(column_index: int)</code>","text":"<p>Set the size of column at column_index to fit its contents.</p> Source code in <code>cutepandas/pandaswidgets/dataframeviewer.py</code> <pre><code>def auto_size_column(self, column_index: int):\n\"\"\"Set the size of column at column_index to fit its contents.\"\"\"\npadding = 20\nself.table_columns.resizeColumnToContents(column_index)\nwidth = self.table_columns.columnWidth(column_index)\n# Iterate over the column's rows and check the width of each\n# to determine the max width for the column\n# Only check the first N rows for performance. If there is larger\n# content in cells below it will be cut off\nN = 75\nrows = min(self.table_data.model().rowCount(), N)\nfor i in range(rows):\nmi = self.table_data.model().index(i, column_index)\ntext = self.table_data.model().data(mi)\ntext = str(text)  # TODO: get rid of casting?\nw = self.table_data.fontMetrics().boundingRect(text).width()\nwidth = max(width, w)\nwidth += padding\n# add maximum allowable column width so column is never too big.\nmax_allowable_width = 400\nwidth = min(width, max_allowable_width)\nself.table_columns.setColumnWidth(column_index, width)\nself.table_data.setColumnWidth(column_index, width)\nself.table_data.updateGeometry()\nself.table_columns.updateGeometry()\n</code></pre>"},{"location":"widgets/DataFrameViewer.html#cutepandas.pandaswidgets.dataframeviewer.DataFrameViewer.auto_size_row","title":"<code>auto_size_row(row_index: int)</code>","text":"<p>Set the size of row at row_index to fix its contents.</p> Source code in <code>cutepandas/pandaswidgets/dataframeviewer.py</code> <pre><code>def auto_size_row(self, row_index: int):\n\"\"\"Set the size of row at row_index to fix its contents.\"\"\"\npadding = 20\nself.table_index.resizeRowToContents(row_index)\nheight = self.table_index.rowHeight(row_index)\n# Iterate over the row's columns and check the width of each to\n# determine the max height for the row\n# Only check the first N columns for performance.\nN = 100\nmodel = self.table_data.model()\nfor i in range(min(N, model.columnCount())):\nmi = model.index(row_index, i)\ncell_width = self.table_columns.columnWidth(i)\ntext = model.data(mi)\n# Gets row height at a constrained width (the column width).\n# This constrained width, with the flag of Qt.TextWordWrap\n# gets the height the cell would have to be to fit the text.\nconstrained_rect = core.Rect(0, 0, cell_width, 0)\ntext = str(text)  # TODO: remove this?\nh = (\nself.table_data.fontMetrics()\n.boundingRect(constrained_rect, constants.TextFlag.TextWordWrap, text)\n.height()\n)\nheight = max(height, h)\nheight += padding\nself.table_index.setRowHeight(row_index, height)\nself.table_data.setRowHeight(row_index, height)\nself.table_data.updateGeometry()\nself.table_index.updateGeometry()\n</code></pre>"},{"location":"widgets/DataFrameViewer.html#cutepandas.pandaswidgets.dataframeviewer.DataFrameViewer.jump_to_column","title":"<code>jump_to_column(col_num: int)</code>","text":"<p>Make sure column at given index is visible.</p> <p>Scrolls to column at given index.</p> <p>Parameters:</p> Name Type Description Default <code>col_num</code> <code>int</code> <p>column to scroll to</p> required Source code in <code>cutepandas/pandaswidgets/dataframeviewer.py</code> <pre><code>def jump_to_column(self, col_num: int):\n\"\"\"Make sure column at given index is visible.\n    Scrolls to column at given index.\n    Arguments:\n        col_num: column to scroll to\n    \"\"\"\nif (model := self.table_data.model()) is not None:\nidx = model.index(0, col_num)\nself.table_data.scrollTo(idx)\nif (model := self.table_index.model()) is not None:\nidx = model.index(0, col_num)\nself.table_index.scrollTo(idx)\nif (model := self.table_columns.model()) is not None:\nidx = model.index(0, col_num)\nself.table_columns.scrollTo(idx)\n</code></pre>"},{"location":"widgets/DataFrameViewer.html#cutepandas.pandaswidgets.dataframeviewer.DataFrameViewer.showEvent","title":"<code>showEvent(event: gui.QShowEvent)</code>","text":"<p>Initialize column and row sizes on the first time the widget is shown.</p> Source code in <code>cutepandas/pandaswidgets/dataframeviewer.py</code> <pre><code>def showEvent(self, event: gui.QShowEvent):\n\"\"\"Initialize column and row sizes on the first time the widget is shown.\"\"\"\nif not self._loaded and self.df is not None:\n# Set column widths\nself._resize_columns()\nself._loaded = True\nevent.accept()\n</code></pre>"},{"location":"widgets/DataFrameViewer.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  94044530296272[\"dataframeviewer.DataFrameViewer\"]\n  94044532284272[\"widgets.Widget\"]\n  94044532282928[\"widgets.WidgetMixin\"]\n  94044526882848[\"core.ObjectMixin\"]\n  139634173933184[\"builtins.object\"]\n  94044527894288[\"gui.PaintDeviceMixin\"]\n  94044530501936[\"QtWidgets.QWidget\"]\n  94044512745568[\"QtCore.QObject\"]\n  94044522409344[\"Shiboken.Object\"]\n  94044513228592[\"QtGui.QPaintDevice\"]\n  94044532284272 --&gt; 94044530296272\n  94044532282928 --&gt; 94044532284272\n  94044526882848 --&gt; 94044532282928\n  139634173933184 --&gt; 94044526882848\n  94044527894288 --&gt; 94044532282928\n  139634173933184 --&gt; 94044527894288\n  94044530501936 --&gt; 94044532284272\n  94044512745568 --&gt; 94044530501936\n  94044522409344 --&gt; 94044512745568\n  139634173933184 --&gt; 94044522409344\n  94044513228592 --&gt; 94044530501936\n  94044522409344 --&gt; 94044513228592</code></pre>"},{"location":"widgets/DataFrameViewer.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"widgets/DataFrameWidget.html","title":"DataFrameWidget","text":"<p>Qt Base Class: QMainWindow</p> <p>Signature: <code>QMainWindow(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"widgets/DataFrameWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.MainWindow</code></p> Source code in <code>cutepandas/pandaswidgets/dataframewidget.py</code> <pre><code>class DataFrameWidget(widgets.MainWindow):\ncurrent_index_changed = core.Signal(core.ModelIndex)\ncurrent_row_changed = core.Signal(int)\ndef __init__(\nself,\ndf: pd.DataFrame | None = None,\nobject_name: str = \"pandas_window\",\n**kwargs,\n):\nsuper().__init__(object_name=object_name, **kwargs)\nself.index_table = widgets.TableView(selection_behavior=\"rows\")\nself.column_table = widgets.TableView(selection_behavior=\"rows\")\nmodel = pandasmodels.PandasIndexListModel(df)\nself.index_table.set_model(model)\nmodel = pandasmodels.PandasColumnListModel(df)\nself.column_table.set_model(model)\nself.column_table.selectionModel().currentChanged.connect(self._on_current_change)\nself.data_table = pandaswidgets.DataFrameViewer(df)\nself.set_central_widget(self.data_table)\nself.category_table = widgets.TableView(selection_behavior=\"rows\")\nself.attrs_table = widgets.TreeView(\nselection_behavior=\"rows\", root_is_decorated=False\n)\nif df is not None:\nself.attrs_table.set_model(df.attrs)\nself.attrs_table.show_root(False)\nself.add_dockwidget(self.index_table, window_title=\"Index list\")\nself.add_dockwidget(self.column_table, window_title=\"Column list\")\nself.add_dockwidget(self.category_table, window_title=\"Category list\")\nself.add_dockwidget(self.attrs_table, window_title=\"MetaData\")\ndef set_df(self, df: pd.DataFrame):\nif df is not None:\nself.attrs_table.set_model(df.attrs)\nself.attrs_table.show_root(False)\nself.data_table.set_df(df)\nmodel = pandasmodels.PandasIndexListModel(df)\nself.index_table.set_model(model)\nmodel = pandasmodels.PandasColumnListModel(df)\nself.column_table.set_model(model)\nself.category_table.set_model(None)\ndef _on_current_change(self, new, old):\nrole = new.model().Roles.ColumnNameRole\ncolumn_name = new.data(role)\ndf = new.data(constants.USER_ROLE)\nmodel = pandasmodels.PandasCategoryListModel(df, column_name)\nself.category_table.set_model(model)\n</code></pre>"},{"location":"widgets/DataFrameWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  94044533851920[\"dataframewidget.DataFrameWidget\"]\n  94044532585264[\"widgets.MainWindow\"]\n  94044532282928[\"widgets.WidgetMixin\"]\n  94044526882848[\"core.ObjectMixin\"]\n  139634173933184[\"builtins.object\"]\n  94044527894288[\"gui.PaintDeviceMixin\"]\n  94044530614896[\"QtWidgets.QMainWindow\"]\n  94044530501936[\"QtWidgets.QWidget\"]\n  94044512745568[\"QtCore.QObject\"]\n  94044522409344[\"Shiboken.Object\"]\n  94044513228592[\"QtGui.QPaintDevice\"]\n  94044532585264 --&gt; 94044533851920\n  94044532282928 --&gt; 94044532585264\n  94044526882848 --&gt; 94044532282928\n  139634173933184 --&gt; 94044526882848\n  94044527894288 --&gt; 94044532282928\n  139634173933184 --&gt; 94044527894288\n  94044530614896 --&gt; 94044532585264\n  94044530501936 --&gt; 94044530614896\n  94044512745568 --&gt; 94044530501936\n  94044522409344 --&gt; 94044512745568\n  139634173933184 --&gt; 94044522409344\n  94044513228592 --&gt; 94044530501936\n  94044522409344 --&gt; 94044513228592</code></pre>"},{"location":"widgets/DataFrameWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>iconSize</code> QSize <code>toolButtonStyle</code> Qt::ToolButtonStyle <code>animated</code> bool <code>documentMode</code> bool <code>tabShape</code> QTabWidget::TabShape <code>dockNestingEnabled</code> bool <code>dockOptions</code> QFlags <code>unifiedTitleAndToolBarOnMac</code> bool"},{"location":"widgets/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>pandaswidgets<ul> <li>DataFrameWidget</li> <li>DataFrameManagerWidget</li> <li>DataFrameViewer</li> <li>DataFrameListWidget</li> </ul> </li> </ul>"}]}